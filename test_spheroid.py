import numpy as np
import numpy.linalg as la
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

pi = np.pi
sin = np.sin
cos = np.cos

def mvee(points, tol = 0.001):
    """
    Finds the ellipse equation in "center form"
    (x-c).T * A * (x-c) = 1
    """
    N, d = points.shape
    
    Q = np.column_stack((points, np.ones(N))).T
    err = tol+1.0
    u = np.ones(N)/N
    while err > tol:
        # assert u.sum() == 1 # invariant
        X = np.dot(np.dot(Q, np.diag(u)), Q.T)
        M = np.diag(np.dot(np.dot(Q.T, la.inv(X)), Q))
        jdx = np.argmax(M)
        step_size = (M[jdx]-d-1.0)/((d+1)*(M[jdx]-1.0))
        new_u = (1-step_size)*u
        new_u[jdx] += step_size
        err = la.norm(new_u-u)
        u = new_u
    c = np.dot(u,points)
  
    A = la.inv(np.dot(np.dot(points.T, np.diag(u)), points)
               - np.multiply.outer(c,c))/d
    return A, c

#aggregate points

points = np.array([[  -7.65271687,   36.2290185 ,   14.25556587],
  [ -42.81795007,   50.61245378,   40.9193588 ],
  [ -38.70310433,   89.65180826,   65.68690887],
  [   0.57697461,  114.30772745,   63.79066601],
  [  35.74220782,   99.92429217,   37.12687309],
  [  31.62736207,   60.88493769,   12.35932302],
  [  -7.31205013,   35.74108864,   14.96805764],
  [ -42.47728334,   50.12452393,   41.63185056],
  [ -38.36243759,   89.16387841,   66.39940063],
  [   0.91764135,  113.8197976 ,   64.50315777],
  [  36.08287455,   99.43636231,   37.83936485],
  [  31.96802881,   60.39700784,   13.07181478],
  [  16.63330757,   45.05509029,   16.8829059 ],
  [  52.85080104,   73.78076968,   12.69205871],
  [  49.91136014,  110.95473864,  -14.94650871],
  [  10.75442576,  119.4030282 ,  -38.39422894],
  [ -25.46306771,   90.67734881,  -34.20338175],
  [ -22.5236268 ,   53.50337985,   -6.56481433],
  [  16.95081426,   44.55091841,   16.17102523],
  [  53.16830773,   73.2765978 ,   11.98017804],
  [  50.22886683,  110.45056676,  -15.65838939],
  [  11.07193246,  118.89885632,  -39.10610962],
  [ -25.14556101,   90.17317693,  -34.91526242],
  [ -22.20612011,   52.99920797,   -7.276695  ]])

'''
points = np.array([[  48.37269352,  83.0832184 , -25.42167456],
                    [46.09809079,  85.01707676, -26.46396734],
                    [ 45.57556552,  85.31471362, -29.56854133],
                    [47.32764298,  83.67849212, -31.63082253],
                    [49.60224571,  81.74463376, -30.58852975],
                    [50.12477098,  81.4469969 , -27.48395576],
                    [-83.11494166, -67.42156182, -17.7201859 ],
                    [-85.38954439, -65.48770345, -18.76247869],
                    [-85.91206966, -65.19006659, -21.86705268],
                    [-84.1599922 , -66.82628809, -23.92933388],
                    [-81.88538947, -68.76014646, -22.88704109],
                    [-81.3628642 , -69.05778332, -19.78246711],
                   [ 104.12622558,  -3.16841453,   2.68705986],
                   [ 104.48814197,  -2.95091976,   5.82102102],
                   [ 104.47715696,  -0.11540771,   7.22093199],
                   [ 104.10425557,   2.50260957,   5.4868818 ],
                   [ 103.74233918,   2.2851148 ,   2.35292064],
                   [ 103.75332418,  -0.55039725,   0.95300967],
                   [ -94.06452701, -15.66405963,  26.44173186],
                   [ -93.70261062, -15.44656486,  29.57569301],
                   [ -93.71359563, -12.61105281,  30.97560399],
                   [ -94.08649702,  -9.99303552,  29.2415538 ],
                   [ -94.44841341, -10.21053029,  26.10759264],
                   [ -94.43742841, -13.04604235,  24.70768167]])
'''       
# Singular matrix error!
# points = np.eye(3)

A, centroid = mvee(points)    
U, D, V = la.svd(A)
#print(U, D, V)
rx, ry, rz = 1./np.sqrt(D)
print(rx, ry, rz)
u, v = np.mgrid[0:2*pi:20j, -pi/2:pi/2:10j]
print('u',u)
print('v',v)
def ellipse(u,v):
    x = rx*cos(u)*cos(v)
    y = ry*sin(u)*cos(v)
    z = rz*sin(v)
    return x,y,z

#print('xmax-xmin',(np.amax(x)-np.amin(x))/2)
#print('ymax-ymin',(np.amax(y)-np.amin(y))/2)
#print('zmax-zmin',(np.amax(z)-np.amin(z))/2)

Ve = 4./3.*rx*ry*rz
#print(Ve)

E = np.dstack(ellipse(u,v))
E = np.dot(E,V) + centroid

x, y, z = np.rollaxis(E, axis = -1)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.plot_surface(x, y, z, cstride = 1, rstride = 1, alpha = 0.5)
ax.scatter(points[:,0],points[:,1],points[:,2], color = 'r')

'''

Va = 3.*np.sqrt(3.)/2. * a^2 * c
'''
plt.show()
